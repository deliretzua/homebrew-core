name: CI

on:
  push:
    branches:
      - master
  pull_request:
  merge_group:

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_FROM_API: 1
  GH_REPO: ${{github.repository}}
  GH_NO_UPDATE_NOTIFIER: 1
  GH_PROMPT_DISABLED: 1

concurrency:
  group: "tests-${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read

jobs:
  tap_syntax:
    if: github.repository_owner == 'Homebrew'
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
    env:
      HOMEBREW_SIMULATE_MACOS_ON_LINUX: 1
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - run: brew test-bot --only-tap-syntax

  formulae_detect:
    if: github.repository_owner == 'Homebrew' && github.event_name != 'push'
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
    outputs:
      testing_formulae: ${{ steps.formulae-detect.outputs.testing_formulae }}
      added_formulae: ${{ steps.formulae-detect.outputs.added_formulae }}
      deleted_formulae: ${{ steps.formulae-detect.outputs.deleted_formulae }}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - run: brew test-bot --only-formulae-detect
        id: formulae-detect

      - name: Fetch detected formulae bottles
        if: >
          github.event_name == 'merge_group' ||
          contains(github.event.pull_request.labels.*.name, 'CI-published-bottle-commits')
        env:
          TESTING_FORMULAE: ${{ steps.formulae-detect.outputs.testing_formulae }}
        run: brew test-bot --only-bottles-fetch --testing-formulae="$TESTING_FORMULAE"

  record_pull_number:
    if: github.repository_owner == 'Homebrew' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Save pull request number
        env:
          PR: ${{github.event.number}}
        run: |
          mkdir -p pr
          echo "$PR" > pr/number

      - uses: actions/upload-artifact@v3
        with:
          name: pull-number
          path: pr

  setup_tests:
    permissions:
      pull-requests: read
    if: github.repository_owner == 'Homebrew' && github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    needs: formulae_detect
    outputs:
      syntax-only: ${{ steps.check-labels.outputs.syntax-only }}
      linux-runner: ${{ steps.check-labels.outputs.linux-runner }}
      logs-dir: ${{ steps.check-labels.outputs.logs-dir }}
      fail-fast: ${{ steps.check-labels.outputs.fail-fast }}
      test-dependents: ${{ steps.check-labels.outputs.test-dependents }}
      timeout-minutes: ${{ steps.check-labels.outputs.timeout-minutes }}
      test-bot-formulae-args: ${{ steps.check-labels.outputs.test-bot-formulae-args }}
      test-bot-dependents-args: ${{ steps.check-labels.outputs.test-bot-dependents-args }}
      cleanup-linux-runner: ${{ steps.check-labels.outputs.cleanup-linux-runner }}
    steps:
      - uses: actions/checkout@v3

      - name: Check for CI labels
        id: check-labels
        uses: actions/github-script@v6
        env:
          TESTING_FORMULAE: ${{needs.formulae_detect.outputs.testing_formulae}}
          ADDED_FORMULAE: ${{needs.formulae_detect.outputs.added_formulae}}
          DELETED_FORMULAE: ${{needs.formulae_detect.outputs.deleted_formulae}}
          SCRIPTS_PATH: .github/scripts
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 3
          script: |
            const path = require('path')
            const script = require(path.resolve(`${process.env.SCRIPTS_PATH}/check-labels.js`))

            const formulae_detect = {
              testing_formulae: `${process.env.TESTING_FORMULAE}`,
              added_formulae: `${process.env.ADDED_FORMULAE}`,
              deleted_formulae: `${process.env.DELETED_FORMULAE}`
            }

            try {
              await script({github, context, core}, formulae_detect)
            } catch (error) {
              console.error(error);
            }

  setup_runners:
    needs: [formulae_detect, setup_tests]
    if: >
      github.event_name == 'pull_request' &&
      !fromJson(needs.setup_tests.outputs.syntax-only)
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
    outputs:
      runners: ${{steps.determine-runners.outputs.runners}}
      runners_present: ${{steps.determine-runners.outputs.runners_present}}
    env:
      HOMEBREW_LINUX_RUNNER: ${{needs.setup_tests.outputs.linux-runner}}
      HOMEBREW_LINUX_CLEANUP: ${{needs.setup_tests.outputs.cleanup-linux-runner}}
      TESTING_FORMULAE: ${{needs.formulae_detect.outputs.testing_formulae}}
      DELETED_FORMULAE: ${{needs.formulae_detect.outputs.deleted_formulae}}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Determine runners to use for tests job
        id: determine-runners
        run: brew determine-test-runners "$TESTING_FORMULAE" "$DELETED_FORMULAE"

  tests:
    needs: [tap_syntax, setup_tests, setup_runners]
    if: >
      github.event_name == 'pull_request' &&
      !fromJson(needs.setup_tests.outputs.syntax-only) &&
      fromJson(needs.setup_runners.outputs.runners_present)
    strategy:
      matrix:
        include: ${{fromJson(needs.setup_runners.outputs.runners)}}
      fail-fast: ${{fromJson(needs.setup_tests.outputs.fail-fast)}}
    name: ${{matrix.name}}
    runs-on: ${{matrix.runner}}
    container: ${{matrix.container}}
    timeout-minutes: ${{ matrix.timeout || fromJson(needs.setup_tests.outputs.timeout-minutes) }}
    defaults:
      run:
        shell: /bin/bash -e {0}
        working-directory: ${{matrix.workdir || github.workspace}}
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
      BOTTLES_DIR: ${{matrix.workdir || github.workspace}}/bottles
    steps:
      - name: Set environment variables
        if: runner.os == 'macOS'
        run: |
          echo 'PATH=/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' >> "$GITHUB_ENV"

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Enable debug mode
        run: |
          echo 'HOMEBREW_DEBUG=1' >> "${GITHUB_ENV}"
          echo 'HOMEBREW_VERBOSE=1' >> "${GITHUB_ENV}"
        if: runner.debug

      - run: brew test-bot --only-cleanup-before
        if: matrix.cleanup

      - run: brew test-bot --only-setup

      - name: Set up bottles directory
        run: |
          rm -rvf "${BOTTLES_DIR:?}"
          mkdir "${BOTTLES_DIR:?}"

      - run: brew test-bot ${{ needs.setup_tests.outputs.test-bot-formulae-args }}
        id: brew-test-bot-formulae
        working-directory: ${{ env.BOTTLES_DIR }}

      - name: Failures summary for brew test-bot --only-formulae
        if: always()
        uses: Homebrew/actions/failures-summary-and-bottle-result@master
        with:
          workdir: ${{ env.BOTTLES_DIR }}
          result_path: steps_output.txt
          step_name: "Build summary on ${{ matrix.runner }}"

      - name: Output brew linkage result
        if: always()
        uses: Homebrew/actions/failures-summary-and-bottle-result@master
        with:
          workdir: ${{ env.BOTTLES_DIR }}
          result_path: linkage_output.txt
          step_name: "`brew linkage` output on ${{ matrix.runner }}"
          collapse: "true"

      - name: Output brew bottle result
        if: always()
        uses: Homebrew/actions/failures-summary-and-bottle-result@master
        with:
          workdir: ${{ env.BOTTLES_DIR }}
          result_path: bottle_output.txt
          step_name: "`brew bottle` output on ${{ matrix.runner }}"
          collapse: "true"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@main
        with:
          name: logs-${{ matrix.runner }}
          path: ${{
              runner.os == 'Linux' && needs.setup_tests.outputs.logs-dir ||
              format('{0}/logs', env.BOTTLES_DIR)
            }}

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf "${BOTTLES_DIR:?}/logs"
          rm -rvf "${BOTTLES_DIR:?}/home"

      - name: Count bottles
        id: bottles
        if: always()
        working-directory: ${{ env.BOTTLES_DIR }}
        run: |
          shopt -s nullglob

          json_files=(*.json)
          count="${#json_files[@]}"
          echo "$count bottles"
          echo "count=$count" >> "$GITHUB_OUTPUT"

          failed_json_files=(failed/*.json)
          failures="${#failed_json_files[@]}"
          echo "$failures failed bottles"
          echo "failures=$failures" >> "$GITHUB_OUTPUT"

          skipped_lists=(skipped_or_failed_formulae-*.txt)
          skipped="${#skipped_lists[@]}"
          echo "$skipped lists of skipped formulae"
          echo "skipped=$skipped" >> "$GITHUB_OUTPUT"

      - name: Upload failed bottles
        if: always() && steps.bottles.outputs.failures > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles-${{ matrix.runner }}
          path: ${{ env.BOTTLES_DIR }}/failed

      # Must be run before the `Upload bottles` step so that failed
      # bottles are not included in the `bottles` artifact.
      - name: Delete failed bottles
        if: always()
        run: rm -rvf "${BOTTLES_DIR:?}/failed"

      - name: Upload bottles
        if: always() && (steps.bottles.outputs.count > 0 || steps.bottles.outputs.skipped > 0)
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: ${{ env.BOTTLES_DIR }}

      - name: Post cleanup
        if: always() && matrix.cleanup
        run: |
          brew test-bot --only-cleanup-after
          rm -rvf "${BOTTLES_DIR:?}"

  conclusion:
    needs: [tests, setup_tests, setup_runners]
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check `tests` result
        run: |
          result='${{ needs.tests.result }}'
          # Silence lint error about backtick usage inside single quotes.
          # shellcheck disable=SC2016
          printf '::notice ::`tests` job status: %s\n' "$result"

          # Possible values are `success`, `failure`, `cancelled` or `skipped`.
          # https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
          if [[ "$result" = "failure" ]] || [[ "$result" = "cancelled" ]]
          then
            # Silence lint error about backtick usage inside single quotes.
            # shellcheck disable=SC2016
            printf '::error ::`tests` job %s.\n' "$result"
            exit 1
          fi

          runners_present='${{ needs.setup_runners.outputs.runners_present }}'
          syntax_only='${{ needs.setup_tests.outputs.syntax-only }}'

          # The tests job can be skipped only if the PR is syntax-only
          # or no runners were assigned.
          if [[ "$result" = "skipped" ]] &&
             [[ "$runners_present" = "false" || "$syntax_only" = "true" ]]
          then
            exit 0
          fi

          # The test job can succeed only if the PR is not syntax-only
          # and runners were assigned. Otherwise it must have been skipped.
          if [[ "$result" = "success" ]] &&
             [[ "$runners_present" = "true" ]] &&
             [[ "$syntax_only" = "false" ]]
          then
            exit 0
          fi

          # If we made it here, something went wrong with our workflow run that needs investigating.
          printf '::error ::Unexpected outcome!\n'
          # Silence lint error about backtick usage inside single quotes.
          # shellcheck disable=SC2016
          printf '::error ::`tests` job result: %s\n' "$result" # success/skipped
          printf '::error ::runners assigned:   %s\n' "$runners_present" # true/false
          printf '::error ::syntax-only:        %s\n' "$syntax_only" # true/false
          exit 1

  setup_dep_tests:
    permissions:
      pull-requests: read
    if: github.repository_owner == 'Homebrew' && github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    needs: [setup_tests, formulae_detect]
    outputs:
      syntax-only: ${{ steps.check-labels.outputs.syntax-only }}
      linux-runner: ${{ steps.check-labels.outputs.linux-runner }}
      logs-dir: ${{ steps.check-labels.outputs.logs-dir }}
      fail-fast: ${{ steps.check-labels.outputs.fail-fast }}
      test-dependents: ${{ steps.check-labels.outputs.test-dependents }}
      timeout-minutes: ${{ steps.check-labels.outputs.timeout-minutes }}
      test-bot-formulae-args: ${{ steps.check-labels.outputs.test-bot-formulae-args }}
      test-bot-dependents-args: ${{ steps.check-labels.outputs.test-bot-dependents-args }}
      cleanup-linux-runner: ${{ steps.check-labels.outputs.cleanup-linux-runner }}
    steps:
      - uses: actions/checkout@v3

      - name: Check for CI labels
        id: check-labels
        uses: actions/github-script@v6
        env:
          TESTING_FORMULAE: ${{needs.formulae_detect.outputs.testing_formulae}}
          ADDED_FORMULAE: ${{needs.formulae_detect.outputs.added_formulae}}
          DELETED_FORMULAE: ${{needs.formulae_detect.outputs.deleted_formulae}}
          SCRIPTS_PATH: .github/scripts
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 3
          script: |
            const path = require('path')
            const script = require(path.resolve(`${process.env.SCRIPTS_PATH}/check-labels.js`))

            const formulae_detect = {
              testing_formulae: `${process.env.TESTING_FORMULAE}`,
              added_formulae: `${process.env.ADDED_FORMULAE}`,
              deleted_formulae: `${process.env.DELETED_FORMULAE}`
            }

            try {
              await script({github, context, core}, formulae_detect)
            } catch (error) {
              console.error(error);
            }

  setup_dep_runners:
    needs: [formulae_detect, setup_dep_tests]
    if: >
      github.event_name == 'pull_request' &&
      !fromJson(needs.setup_dep_tests.outputs.syntax-only) &&
      fromJson(needs.setup_dep_tests.outputs.test-dependents)
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/homebrew/ubuntu22.04:master
    outputs:
      runners: ${{steps.determine-dependent-runners.outputs.runners}}
      runners_present: ${{steps.determine-dependent-runners.outputs.runners_present}}
    env:
      HOMEBREW_LINUX_RUNNER: ${{needs.setup_dep_tests.outputs.linux-runner}}
      HOMEBREW_LINUX_CLEANUP: ${{needs.setup_dep_tests.outputs.cleanup-linux-runner}}
      TESTING_FORMULAE: ${{needs.formulae_detect.outputs.testing_formulae}}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Determine runners to use for test_deps job
        id: determine-dependent-runners
        run: brew determine-test-runners --dependents --eval-all "$TESTING_FORMULAE"

  test_deps:
    needs: [tap_syntax, setup_dep_tests, setup_dep_runners, tests]
    if: >
      (success() || 
      (failure() && !fromJson(needs.setup_dep_tests.outputs.fail-fast))) &&
      github.event_name == 'pull_request' &&
      !fromJson(needs.setup_dep_tests.outputs.syntax-only) &&
      fromJson(needs.setup_dep_tests.outputs.test-dependents) &&
      fromJson(needs.setup_dep_runners.outputs.runners_present)
    strategy:
      matrix:
        include: ${{fromJson(needs.setup_dep_runners.outputs.runners)}}
      fail-fast: ${{fromJson(needs.setup_dep_tests.outputs.fail-fast)}}
    name: ${{matrix.name}} (deps)
    runs-on: ${{matrix.runner}}
    container: ${{matrix.container}}
    timeout-minutes: ${{ matrix.timeout || fromJson(needs.setup_dep_tests.outputs.timeout-minutes) }}
    defaults:
      run:
        shell: /bin/bash -e {0}
        working-directory: ${{matrix.workdir || github.workspace}}
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
      BOTTLES_DIR: ${{matrix.workdir || github.workspace}}/bottles
    steps:
      - name: Set environment variables
        if: runner.os == 'macOS'
        run: |
          echo 'PATH=/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' >> "$GITHUB_ENV"

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Enable debug mode
        run: |
          echo 'HOMEBREW_DEBUG=1' >> "${GITHUB_ENV}"
          echo 'HOMEBREW_VERBOSE=1' >> "${GITHUB_ENV}"
        if: runner.debug

      - run: brew test-bot --only-cleanup-before
        if: matrix.cleanup

      - name: Download bottles from GitHub Actions
        uses: actions/download-artifact@v3
        with:
          name: bottles
          path: ${{ env.BOTTLES_DIR }}

      - run: brew test-bot ${{ needs.setup_dep_tests.outputs.test-bot-dependents-args }}
        working-directory: ${{ env.BOTTLES_DIR }}

      - name: Failures summary for brew test-bot ${{ needs.setup_dep_tests.outputs.test-bot-dependents-args }}
        if: always()
        uses: Homebrew/actions/failures-summary-and-bottle-result@master
        with:
          workdir: ${{ env.BOTTLES_DIR }}
          result_path: steps_output.txt
          step_name: "Dependent summary on ${{ matrix.runner }}"
          collapse: "true"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@main
        with:
          name: logs-deps-${{ matrix.runner }}
          path: ${{
              runner.os == 'Linux' && needs.setup_dep_tests.outputs.logs-dir ||
              format('{0}/logs', env.BOTTLES_DIR)
            }}

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf "${BOTTLES_DIR:?}/logs"
          rm -rvf "${BOTTLES_DIR:?}/home"

      - name: Post cleanup
        if: always() && matrix.cleanup
        run: |
          brew test-bot --only-cleanup-after
          rm -rvf "${BOTTLES_DIR:?}"
