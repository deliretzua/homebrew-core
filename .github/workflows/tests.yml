name: GitHub Actions CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_CHANGE_ARCH_TO_ARM: 1
  HOMEBREW_RELOCATE_RPATHS: 1

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true

jobs:
  tap_syntax:
    if: github.repository == 'Homebrew/homebrew-core'
    runs-on: ubuntu-latest
    env:
      HOMEBREW_SIMULATE_MACOS_ON_LINUX: 1
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Bundler RubyGems
        uses: actions/cache@v1
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Bundler RubyGems
        run: brew install-bundler-gems

      - run: brew test-bot --only-tap-syntax

  pre_tests:
    if: github.event_name == 'pull_request' && github.repository == 'Homebrew/homebrew-core'
    runs-on: ubuntu-latest
    needs: tap_syntax
    outputs:
      runners: ${{ steps.check-labels.outputs.runners }}
      container: ${{ steps.check-labels.outputs.container }}
      syntax-only: ${{ steps.check-labels.outputs.syntax-only }}
      force-arm: ${{ steps.check-labels.outputs.force-arm }}
      force-linux: ${{ steps.check-labels.outputs.force-linux }}
      test-bot-fail-fast: ${{ steps.check-labels.outputs.test-bot-fail-fast }}
      test-bot-skip-recursive-dependents: ${{ steps.check-labels.outputs.test-bot-skip-recursive-dependents }}
    steps:
      - name: Check for CI labels
        id: check-labels
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: { labels: labels } } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })
            const label_names = labels.map(label => label.name)

            if (label_names.includes('CI-syntax-only')) {
              console.log('CI-syntax-only label found. Skipping tests.')
              core.setOutput('syntax-only', 'true')
            } else {
              console.log('No CI-syntax-only label found. Running tests.')
              core.setOutput('syntax-only', 'false')
            }

            if (label_names.includes('CI-force-arm')) {
              console.log('CI-force-arm label found. Running ARM builds.')
              core.setOutput('force-arm', 'true')
            } else {
              console.log('No CI-force-arm label found. Not requiring ARM builds.')
              core.setOutput('force-arm', 'false')
            }

            if (label_names.includes('CI-force-linux')) {
              console.log('CI-force-linux label found. Running Linux builds.')
              core.setOutput('force-linux', 'true')
            } else {
              console.log('No CI-force-linux label found. Not requiring Linux builds.')
              core.setOutput('force-linux', 'false')
            }

            if (label_names.includes('CI-test-bot-fail-fast')) {
              console.log('CI-test-bot-fail-fast label found. Passing --fail-fast to brew test-bot.')
              core.setOutput('test-bot-fail-fast', '--fail-fast')
            } else {
              console.log('No CI-test-bot-fail-fast label found. Not passing --fail-fast to brew test-bot.')
              core.setOutput('test-bot-fail-fast', '')
            }

            if (label_names.includes('CI-test-bot-skip-recursive-dependents')) {
              console.log('CI-test-bot-skip-recursive-dependents label found. Passing --skip-recursive-dependents to brew test-bot.')
              core.setOutput('test-bot-skip-recursive-dependents', '--skip-recursive-dependents')
            } else {
              console.log('No CI-test-bot-skip-recursive-dependents label found. Not passing --skip-recursive-dependents to brew test-bot.')
              core.setOutput('test-bot-skip-recursive-dependents', '')
            }

            if (label_names.includes('CI-linux-wheezy')) {
              console.log('CI-linux-wheezy label found. Running Linux wheezy builds.')
              core.setOutput('container', 'homebrew/debian7:latest')
            } else {
              console.log('No CI-linux-wheezy label found. Not requiring Linux wheezy builds.')
              core.setOutput('container', 'ghcr.io/homebrew/ubuntu16.04:master')
            }

            /* RUNNERS */

            const runners = ["11-arm64", "11", "10.15", "10.14"]

            if (label_names.includes('CI-linux-self-hosted')) {
              runners.push('linux-self-hosted-1')
            } else {
              runners.push('ubuntu-latest')
            }

            core.setOutput('runners', JSON.stringify(runners))

  tests:
    needs: pre_tests
    if: github.event_name == 'pull_request' && needs.pre_tests.outputs.syntax-only == 'false'
    strategy:
      matrix:
        runner: ${{fromJson(needs.pre_tests.outputs.runners)}}
      fail-fast: false
    runs-on: ${{matrix.runner}}
    timeout-minutes: 4320
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      HOMEBREW_GITHUB_API_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Set environment variables
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            echo 'PATH=/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' >> $GITHUB_ENV
            echo 'GITHUB_ACTIONS_HOMEBREW_MACOS_SELF_HOSTED=1' >> $GITHUB_ENV
            if [ '${{needs.pre_tests.outputs.force-arm}}' = 'false' ]; then
              echo 'HOMEBREW_SKIP_UNBOTTLED_ARM_TESTS=1' >> $GITHUB_ENV
            fi
          else
            # No PATH needed on Linux as set by Docker
            echo 'HOMEBREW_CORE_GIT_REMOTE=${{github.event.repository.html_url}}' >> $GITHUB_ENV
            echo 'HOMEBREW_FORCE_HOMEBREW_ON_LINUX=1' >> $GITHUB_ENV
            if [ '${{needs.pre_tests.outputs.force-linux}}' = 'false' ]; then
              echo 'HOMEBREW_SKIP_UNBOTTLED_LINUX_TESTS=1' >> $GITHUB_ENV
            fi
          fi

      - name: Set up Homebrew
        id: set-up-homebrew
        if: runner.os == 'macOS'
        uses: Homebrew/actions/setup-homebrew@master

      - if: runner.os == 'macOS'
        run: brew test-bot --only-cleanup-before

      # `brew doctor` won't work on Linux (yet)
      # TODO: reenable this when possible.
      - if: runner.os == 'macOS'
        run: brew test-bot --only-setup

      - name: Run Docker container
        if: runner.os == 'Linux'
        run: |
          docker run \
            --detach \
            --user linuxbrew \
            --name ${{github.sha}} \
            --env-file <(env | egrep 'HOMEBREW|GITHUB') \
            --workdir /tmp/bottles \
            ${{needs.pre_tests.outputs.container}} \
            sleep inf
          # Fix working directory permissions
          docker exec --user root ${{github.sha}} chmod 777 /tmp/bottles

      - name: Set up Homebrew in container
        if: runner.os == 'Linux'
        env:
          TAP_PATH: /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core
        run: |
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git remote set-url origin ${{github.event.repository.html_url}}
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git fetch origin ${{github.sha}} '+refs/heads/*:refs/remotes/origin/*'
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git remote set-head origin --auto
          docker exec --workdir "$TAP_PATH" ${{github.sha}} git checkout --force -B master FETCH_HEAD

      - name: Run brew test-bot --only-json-tab --only-formulae ${{ needs.tap_syntax.outputs.test-bot-fail-fast }} ${{ needs.tap_syntax.outputs.test-bot-skip-recursive-dependents }}
        run: |
          if [ "$RUNNER_OS" = 'macOS' ]; then
            mkdir bottles
            cd bottles
            brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }}
          else
            docker exec ${{github.sha}} brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }}
          fi

      - name: Copy bottles from container
        if: always() && runner.os == 'Linux'
        run: docker cp ${{github.sha}}:/tmp/bottles .

      - name: Output brew test-bot --only-json-tab --only-formulae ${{ needs.pre_tests.outputs.test-bot-fail-fast }} ${{ needs.pre_tests.outputs.test-bot-skip-recursive-dependents }} failures
        if: always()
        run: |
          cat bottles/steps_output.txt
          rm bottles/steps_output.txt

      - name: Output brew bottle result
        if: always()
        run: |
          cat bottles/bottle_output.txt
          rm bottles/bottle_output.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: logs-${{ matrix.runner }}
          path: bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf bottles/logs
          rm -rvf bottles/home

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"
          failures=$(ls failed/*.json | wc -l | xargs echo -n)
          echo "$failures failed bottles"
          echo "::set-output name=failures::$failures"

      - name: Upload failed bottles
        if: always() && steps.bottles.outputs.failures > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles-${{ matrix.runner }}
          path: bottles/failed

      # Must be run before the `Upload bottles` step so that failed
      # bottles are not included in the `bottles` artifact.
      - name: Delete failed bottles
        if: always()
        run: rm -rvf bottles/failed

      - name: Upload bottles
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: bottles

      - name: Post cleanup
        if: always()
        run: |
          if [ "$RUNNER_OS" = 'Linux' ]; then
            docker rm -f ${{github.sha}}
          else
            brew test-bot --only-cleanup-after
          fi
          rm -rvf bottles
